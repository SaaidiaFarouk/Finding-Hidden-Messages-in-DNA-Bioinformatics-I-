import random
import os 
from random import choices
def randomx(x):
    return random.randint(0, x)

def hamming_distance(p,q):
    c=0
    for i in range(len(p)):
        if p[i]!=q[i]:
            c+=1
    return c

def motifmatrixcreatorrr(dna,t):
    dnas=dna
    dictt=dict()
    dictt['A']=list()
    dictt['C']=list()
    dictt['G']=list()
    dictt['T']=list()
    for i in range(len(dnas[0])):
        dictt['A'].append(0)
        dictt['C'].append(0)
        dictt['G'].append(0)
        dictt['T'].append(0)
    for i in range(t):
        for j in range(len(dnas[0])):
            if dnas[i][j]=='A':
                dictt['A'][j]=dictt['A'][j]+1
            elif dnas[i][j]=='C':
                dictt['C'][j]=dictt['C'][j]+1
            elif dnas[i][j]=='G':
                dictt['G'][j]=dictt['G'][j]+1
            elif dnas[i][j]=='T':
                dictt['T'][j]=dictt['T'][j]+1
    for x in ['A','C','G','T']:
        for j in range(len(dnas[0])):
            dictt[x][j]=dictt[x][j]/(t)
    return dictt

def consensus(motifs,t,k):
    profile=motifmatrixcreatorrr(motifs,t)
    consen=''
    for i in range(k) :
        m=float()
        list1=list()
        for j in ['A','C','G','T']:
            list1.append(profile[j][i])
        m=max(list1)
        x=list1.index(m)
        g=''
        if x == 0:
            g='A'
        if x == 1:
            g='C'
        if x == 2:
            g='G'
        if x == 3:
            g='T'
        consen=consen + g 
    return consen

def scoree(motifs,t,k):
    consen=consensus(motifs,t,k)
    sc=0
    for i in range(len(motifs)):
        dis=hamming_distance(consen,motifs[i])
        sc=sc+dis
    return sc

def motifmatrixcreator(dna,t):
    dnas=dna
    dictt=dict()
    dictt['A']=list()
    dictt['C']=list()
    dictt['G']=list()
    dictt['T']=list()
    for i in range(len(dnas[0])):
        dictt['A'].append(1)
        dictt['C'].append(1)
        dictt['G'].append(1)
        dictt['T'].append(1)
    for i in range(t):
        for j in range(len(dnas[0])):
            if dnas[i][j]=='A':
                dictt['A'][j]=dictt['A'][j]+1
            elif dnas[i][j]=='C':
                dictt['C'][j]=dictt['C'][j]+1
            elif dnas[i][j]=='G':
                dictt['G'][j]=dictt['G'][j]+1
            elif dnas[i][j]=='T':
                dictt['T'][j]=dictt['T'][j]+1
    for x in ['A','C','G','T']:
        for j in range(len(dnas[0])):
            dictt[x][j]=dictt[x][j]/(t+4)
    return dictt

def score(dict,pattern):
    scoree=1
    for i in range(len(pattern)):
        if pattern[i]=='A':
            val=float(dict['A'][i])
        if pattern[i]=='C':
            val=float(dict['C'][i])
        if pattern[i]=='G':
            val=float(dict['G'][i])
        if pattern[i]=='T':
            val=float(dict['T'][i])
        scoree=scoree*val
    return scoree

def GibbsSampler(dna,k,t,n):
    bestmotifs=list()
    motifs=list()
    list1=dna.split(" ")
    for i in range(t):
        x=(len(list1[0])-k)
        s=randomx(x)
        motifs.append(list1[i][s:s+k])
    bestmotifs=motifs[:]
    for j in range(1,n+1):
        p=list()
        motiff=list()
        auxmotifs=list()
        population=list()
        i=random.randrange(0,t)
        auxmotifs=motifs[:]
        auxmotifs.remove(auxmotifs[i])
        profile=motifmatrixcreator(auxmotifs,t-1)
        for f in range(len(list1[i])-k+1):
            motif=list1[i][f:f+k]
            p.append(score(profile,motif))
            population.append(motif)
        motiff=choices(population,p)
        motifs[i]=motiff[0]
        if scoree(motifs,t,k)<scoree(bestmotifs,t,k):
            bestmotifs=motifs[:]
    return bestmotifs



random.seed(0)
dna="ACCGCCTCTATTTTCCACAGTCGCTTGCATCACTAAGGCTATCGCCGGAGTTCACGACCTTCTATACTCAAGGAGGACTCCGATCTCCCACAGCTGATCGGACCAACCACGTGTGCCCGACTTATGAGAGGCACATCCACACTGTTCTATTGTCGTTCAACCTAACTATATTCCCGTTTGCTGCTTCCTTAGGATGGATCTAAAAGCCTTAGAAGGTTCCCGCGGTAGCCATGTAGACGTCTTTCCTGGCTGATAGGTCAAGAGTATCGTCCTCTACTTATGGTTCAGGCTCGCTACAGGACCCCACCGCCTCTATTTTC CACAGTCGCTTGCATCACTAAGGCTATCGCCGGAGTTCACGACCTTCTATACTCAAGGAGGACTCCGATCTCCCACAGCTGATCGGACCAACCACGTGTGCCGATACTATAACGGCCCGACTTATGAGAGGCACATCCACACTGTTCTATTGTCGTTCAACCTAACTATATTCCCGTTTGCTGCTTCCTTAGGATGGATCTAAAAGCCTTAGAAGGTTCCCGCGGTAGCCATGTAGACGTCTTTCCTGGCTGATAGGTCAAGAGTATCGTCCTCTACTTATGGTTCAGGCTCGCTACAGGACCCCACCGCCTCTATTTTC CCCTCTACGAAGTTTGGGGCTCTCGAATACCGGTCTGATGCCAGTTGCTCACGACAGACGTTTACTTCTGGCAGCTGAAGCTTTGGCATATACTTAAATCGGATGAAGCCCGCAACTGCCAATTTTGGGTACATGAGGACGTTCAGTATAGGGTGTGTGGCTCGCTGTAAAAATTGCGAGCGCCTAACGGCACTCTCCGGACTTGCTCTCTGAATAGGAATTCAATTGATGCAGCATACGCATTCCCGCTTACCGGGACATGCCCTCCCTGCGTTAACATCCCCCTGTTCCTTTGAGAAATTCTATAGCCCCAAGAGTTA GACTACAGAGGGACTGCACCCGGTGGGCTCACGGAAAAGAGAAATATGCTGAGCGTTTAGAATTATAATCGGTCTGAGCGAGAATGTAGATATCCTTCTCGGCAAAGTTTGCCTAGGAGATCTCGCCTGTAATGTCCTCGTGTCGTTCCAGAACAGCGAGGCAAGCCCCATTTCCGAGCATATAGAAGCGTGGACATTGGGATAATTGTCAGGAAATGAGCAGGAACTAACCTCGAATGTGGTACAGCCGATGGGACAGGGGAGGTTGCTTTACGAGGTTCAAGTCTAATCTGTGTTGGGTATTTTCGGGAACAAGATAA AGTTGCATAACATTAGCGACGGCCGGACATCCACCTAGGGTTGAACCCCTGCGCTCCGTCCAAGGTCGTTTTCAATCTACAGTTTGGTTCTTGGGACACTTTTAAACCTGCTACGCGTATCGGAAATAATAAATCTGCCCTTAAGACGGCCGAAACTATAACGGCCAGGACTCATGTAGAGGATGATTCGGATGGCCTGATGCGTCCAAGACCAACGTCCCTCCGGTTGCGCTTAGCGGGCGCAGATTTTGTCGCCTCATTCTGCTTGCAAGGACACATGGATCGCCGAGATCCTTCACGCGAAAAGTCGACCATGATTG ATTCTTCGTAACGCAGTTGTCTTCCATATACTAGGGGAGTTAAGAAGCGCTTGCCAGACGGTGGCACGTCCCGTATTTTTGAGACGCCATCAAGCAAGGTTTGAGGGCGCGCGTTAAAACCGCGCTTGGCTCAGATCGTCAGTGCCCGGACAAAGAGATACCCACATATAACGGCCCCCGAAATGGCATATCTTTCTTCCGAGCTGCTCCGCGATTAACATCTTATGACATGAAGCAAGGAACAGGCTCGTATTGAAAAACGCAATTCGTTAGAAAAATTACGCGCTCTTCATAACGGACGCCTGGCCCCAGTGAGGCCA GTAATGAGAGATATTAAATCATAGAGTACTAGATGTATTTGGCGCCAGCATCCTATCCGTCTACGGAAAATCTGGTTATCCGGACATCATGACTTTGACGAGAGCTGGTTACAGGCCAACCAACGTTCTGCATATAACGGCCGTTACGCCGCTTCACCTAGTGAGCCCCCCCTTACGGATACTTTAGTGCGTCAAGTCATTAACTCCTTACAAGGATGGAGAACTTCTTGTATGCCACCGATTACATGCCGTACGAAGTTAGATTGACTGCTTGGGCTCACCATAATTACGATCCATCTAGTATGTGTTTTATCCAACGA GGTGCCCTCCCACCACACCGGCGGGACGTGGCGAGGCCATAACGGCGACCATTTGAATCTACATCAATCCAGTTCGATTATTTAACTTAGAATGAGGCGTTCTAATCCACATATTATCGGTCCATACCCTCGGTAATGTTGGATCTAAGTACCTGCGTTAAGTTAAGGTTATCCTTGTACACGACAGGTCTTGCCCCACGGAGATTCCTAGCAACACAGCTTACGCCATAAAACACAGTATGGCTCGACGACCCAACTCAGACCGCGGTAATCGAAGCCTAGATCATTAAGAAACCAGGCCTGTGACTTCAGCCATGTGT TCCCGGAGTAGACCGATCAGATGGCGGGCCGAGGGGGAAGTAGTGCCAAGACATGGTATGGTAGGATACAATCGCTGTAACCATAGCCAACGCATAATCTCCGAACCTTATTGACGGTCTTCGAGGTCGGGGTGTATCAGTCCCCTAAGGTTTCAATCCTGGGGCCAAAATTCAGCCACTGAGTCTAAAAATACAACCGTTCATCCGAGCACCAAACGGCTCGACTTCTAAGGCAGGAGCATTATAAGGAATGAACATTAAACTCGAGGGAGTCGGTTAGCTGAGACTTGTCCACCCCGCGATCTCATGGTTTACCACCC TATGTCTCAACTATTTTAACCTTTGAGTTGCGAGAGCTCTTGCAGGACACTAAAAGGCGTAAAGTGGCGGACAATAGTAGACTCGGACTAGGAGCCCAACGACCTAGAGATTGAAGAGGGGAGATTGGTTGTACAAATCGCTCTATTCGGCACTAAATTCGTAGCATATGATTCTTAATGTTATCGCGACGGCGTTAAGTCGAGCTCTTAACGGCTTTTCGGCGCCGATAGGCCTATATAATAACTTCGCATTATGCTACAGTGAGACCGTATAGTTAATAAGGGACCCTGACTGGACAAGGTGGAGTACGACATGAATA ATCTTTAGCGGTCTGGAGTGGCCCTGCCGGAGACGCGACAACCCTAGGAGTCTTGCGAGCTCCCCTTGCGGGAACTGTAGTTGGAAACTGTAGACGACCCGCAGATGATGCCTGAGCGTAAATATAACGGCCCCAGGAATAGTACTCTAACCACGGCGCGAAGCTGGCACTCACTGATAGCGTGACAGTGTACCCGCACTTGAATTAGTACCCAGCGTGACCTGCCCTAGTTTTTTTTTTAGTATTTCCAATCTTCGTGACACCAACCTTAGTAAAGAAGTCAGTTGTATGGCGCCCCAATGTACGCGTTCGCATATTCG AGGAGAGCATATAACGCTGGAGACCACGACGCAAATCCTTGCACCACATGCAGGATTGGCGATACCCACTCCCGAAGTTTAGTCGGCCTACCGTGCGTACAAGGCGCTGCCCTCCGAAGAAAGATAAACCTCGCGATGCCTTCTCTTTGACGCCGGCCCGTCGGACGATTTCATTAATAGTGTCCTGGGGAATGCAAAGTTGCTACAAAACAACATTCGGTTGTCGGATTGAGACGTCTTTCCTCTTCGGATGAACCAACTAACCACCTGGCACAAATTTTGGACTTGTACTTTTTAAACTACCTTGAGGTGTGATGGAT CTTTCCTAACTCAGTGTTATGTTAAGCCTGTCCATTATTGTGACACATGCGACAAGACGGAGCTTGGACACAGCGGCATTTCATCATCCTCTATAAGATACTGCAGTTCCGACTATGCTTGGCCAGACAGAGCCGAGGGAGCAATACCCCATACCAACAGACCGACGTTTGGATTAACGGCTCTTATTATCGATTCTATCTCCGGCATTTTTACCGACAAGGTGTGGGGAGAGACTCACCATCGTAGATAAGAGGTCCTATGCAGTAAGTGCAAACGTCCCCGCGGTTGGAACTAGCAACTGCGAGCATGGTACGGCGTT CCAGAGAATCTATAACACGGAAAAGGCTCCGGCAGGCTCAGTGTTCGGGCTTGACCTAGGAGGTCCTTCGTCGCTTAAATTAGACGGTTCGTGAGGATTTGTTATGGCCGTCACGGTCTTCGATAACCAAAAACACCAGCGAGACGGGCTGCACCCACGAGCACTGAACGGCCACCTATACAGGCAGACACCTTAGAGTGTAGGCTACCAGTCCGCGGTGCACACGTTACCAGTACAAGGTTGGGCGTGTTGCGAAAAACTTCTCATGTGGCTATTTCGGGAACTCAATACACACACCGAAACCCGGACCTACCAACCCT GGCTGTACTTTAGAGAACGCCCGCTGTAGTGTAAAACATATACCGGGACGACGTCGCATACACGCGATATTCTAATTAGCGCCGGTAGGCGAGTCACACAATACCTTGTGTATCTAGTCTTTGGTCAATAATGATAGTGCTGGTCGAGCATACGGCGGCTAGTAAAAGAAATCACTATCCGCAAACACAGGTTCACTCGCGACCTCGCATCTCTAACCTGTCTGTCCGCTTCACAATGACGAAGAAAGACTCAGTCTCCTAAGGTTATTTCTATTCGTGCTCGCTTTGGAGCAGCCCTGGTGCCTTAATGCGTTTGCCGC CCATAATGGTATCGAGTACTAAGGTTTTTATACGCGATTGCAGACAAACTAGAATCTCACCTTTGCATTGAGAACGACAATTTAATTAATCTGTCTGGAGTGTTTACGTGGTGACTCATCTCAAAGCGCATCCAAAGAATCTTAATGAGGCTCGAAGCAAATTTAAAAACTAATGATCAAGGACTGTCGTTTCGTCTGCTACTTGGTAGGTTACTAGAAAAGAAAAGACAATATGGGCAGCTTGGACTACTATAACGGCTACATGCTAGCGGTCCTCTGCCAGTCGAGCATATAAAATCGGTGAAACTGTTATAAGTAAC GACGTCTCCGTCGGCACTCAACAAGTATAACTGTGTATACAGTACTTGTGTTCTGTTTTACAAACCCACAGCCTTTTGGTCGTACGCTAGCAAGCCAACCCTGGGTAAATTTATTGAAACCCTTCGCTGCGTGATCCAGTCGACGACTAAGGGGAGCAAGGAACTATCCGTTACTTGTTAGGACAGTGATAGCGATTGGTGCGTGTCATGTAACAGTCCTGGAGGATCGTCGGGCGTCAACTACTTCGAGCATATAACAAAACCTTGCTCCGCTAGGCGCGCTGTAGCCAACCACTTATGACTAAGGAAGTCGTCTGCTT TGCTATGAATGACGTACTATCCCCTACGTCTGACAACGCGGTAATTATACTGTTCGGCCACCCACTTCATCAGCCGGGGTCATAAGGTAACGCTCTTCCAAGACGCTCGGCTGACTCCGGTGTTCCCCCACGGTCGTTACAAAATGCTTATATAAGTTCCCCGCTGTAGCTAATCGCCAGCAGGCTACAGTATGTACCCACGCTCATGTCGCCAAGGCGTTAAAGAAAAGATCGTGGCTCATCCGAAGCATATAACGGGTCCGACTTGTAAGGACCGCGCAGGGCCCTGGATTAGAGTACGCACACACCCCCCTTCGCTC GGCTTAGAGGTGAAGATCACTAGTCATAACAGGTGGATTATTTCTACCGGTCCGGTCAAAGCTTTTTCGGGACGGCCTCACGGCTGGCCCCACTCCTAGCTTTCACTGGTGCTACTAGACGCTGCGATGAAGTTTCATTCACCAAAGAGTTCTAAGAAAAGTTTCGTGGTCGAGGTCATAACGGCAGAATGACAATGGCGTCCTGCTGGACCGACACTGGCATCTGGTGATTCATCGTAACTCAGGTACGCCTCTGGCTAGTCCCATGATGAGTACACTGGGCTCATGGACCCAGCACGACATCGCACGTGCTCCACAGC TACTGGCCCGAGTGGAAAAGCTTCCAGCTAACCCCCTGATTCGTGCTTCCCGCTCAAATCCCGGTACGAGCATATTCTGGCGAATCTCGACTCACAGTCGTATCATTAGGATTAGTCCACGAGGATAAGTCGCCTGTCCCCCAGCATCGCTGGCTTCCTCCGAAGATAGCCTCAAACGTTTCGCGGGATCGGTGATTCTGGCTTGATGAGTAGGATAGGGGACGGTAGAATTCATCGGAGGCCCTCGTTGGCTGGCAATTCTGGGCGGCACGATTTAGTTTTTAATGTGGACTCACATGCTACGATTAGAGTTTGAGAGA"
t=20
k=15
n=2000
mot=list()
bestmotifs=GibbsSampler(dna,k,t,n)
for i in range(19):
    motifs=GibbsSampler(dna,k,t,n)
    if scoree(motifs,t,k)<scoree(bestmotifs,t,k):
        bestmotifs=motifs[:]
mot=bestmotifs[:]
os.remove("submission.txt")
f=open("submission.txt","a")
for i in range(len(mot)):
    val=mot[i]
    f.write(val)
    f.write(" ")
f.close()
print(mot)




        








    
