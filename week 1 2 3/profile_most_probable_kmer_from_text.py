
def score(dict,pattern):
    scoree=1
    for i in range(len(pattern)):
        if pattern[i]=='A':
            val=float(dict['A'][i])
        if pattern[i]=='C':
            val=float(dict['C'][i])
        if pattern[i]=='G':
            val=float(dict['G'][i])
        if pattern[i]=='T':
            val=float(dict['T'][i])
        scoree=scoree*val
    return scoree


def profilemostproba(profile,text,k):
    profix=dict()

    nucleotides=profile.split('\n')
    profix['A']=nucleotides[0].split()
    profix['C']=nucleotides[1].split()
    profix['G']=nucleotides[2].split()
    profix['T']=nucleotides[3].split()
    scoree=0
    for i in range(len(text)-k+1):
        pattern=text[i:i+k]
        if scoree<score(profix,pattern):
            scoree=score(profix,pattern)
            patternn=pattern
            print(scoree)
    return patternn


profile="""0.361 0.145 0.313 0.386 0.253 0.205 0.265 0.205 0.277 0.205 0.337 0.265
0.181 0.361 0.205 0.241 0.229 0.325 0.277 0.265 0.217 0.325 0.253 0.313
0.229 0.229 0.265 0.217 0.229 0.181 0.217 0.265 0.325 0.289 0.217 0.193
0.229 0.265 0.217 0.157 0.289 0.289 0.241 0.265 0.181 0.181 0.193 0.229"""
text='TTGGCACTAAAGACGGATCAAACCGGCGGCGCAATAAGCCGGGGTTAATCAACTGGAAGGACTGCCGTGAGTTTAATCCGCGTAATCCAGGCTCATGCCCCGTGCCTACGCCGAACACGTCCCATCCAACGCAAGCCTACTACAAGCTGCCATGAGTATTAGAGAACGGCGCCAATGGAGGCAGTTGAATACTAGCCTCTCCCGCGTTTTAATCTCTATGCCCAACCGGCTTGGTTGGTAAGAAAGCGTCTAGAAATTCCCCAGTCGGCTCCATATAGTCTGGGCACCGAATCGTCATATAGCAGAGTATCAGGTTCTTTAACGGAAATTGCGTAAATACATGGCGAAAGAAGTCGCTGTGTATCTAAAGTCTAGGGGTGCTCTGGCGTCCGGGTTACTATAGTAAACACCCAATATCCTCTCCCAGGGGATTGGCACGGAGTGTTGCTAATTAACGGCTGTGACCCCGACTATGTCAGATTCAGGCACGGCCCATGTCTTTTTGACATACCGAGCGGTGGCCTCTCTACTAAAAGAACTATCCGGGAGTATGCGTTGTGCCGTACGTGGCCTATTTATCGATACCCATATTAACCCTTAAATCAAATGCTGCTCACCCTCACGGCAGTAAGTAGAGAACTCGCCCCCAACTGTGCCAAAAACATTATTTGTGTAGATGACGTTCTAGGATACAACACACGCGCCTGCCGTAACGTCGAAATCCGTATGTCTACCCCGCCTACTGGGGCTCTGACAGTAATTCGTTCTGGTGTAAGTAAAAACCTGTAAAAAGGCTTAACCTTAGCAACGAACTTATGGTGGGTAGACTGTACAGATTGATCTTGCCCCCACCAAGCGTCTAGGCATTAACTAGATCTCTGTGTGGGAGGTCCTCATATTCGTCAGGGCCAGCGACGCGGGCGCAATATGGATTCCGGGTCACACCCTGAAGTCCTTTACATGCGTCGACTCCGGTTGTCCCGGCTTTCACCGGAGGACG'
k=12
print(profilemostproba(profile,text,k))

